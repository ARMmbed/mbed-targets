# Python package
# Create and test a Python package on multiple Python versions and host platforms.


stages:
- stage: AnalyseTest
  displayName: 'Analyse and Test'
  jobs:
  - job: Test
    strategy:
      maxParallel: 10
      matrix:
        Linux_Py_3_6:
          python.version: '3.6'
          vmImageName: ubuntu-18.04
          uploadCoverage: "false"

        Linux_Py_3_7:
          python.version: '3.7'
          vmImageName: ubuntu-18.04
          uploadCoverage: "true"

        Windows_Py_3_6:
          python.version: '3.6'
          vmImageName: windows-2019
          uploadCoverage: "false"

        Windows_Py_3_7:
          python.version: '3.7'
          vmImageName: windows-2019
          uploadCoverage: "false"

        macOS_Py_3_6:
          python.version: '3.6'
          vmImageName: macOS-10.14
          uploadCoverage: "false"

        macOS_Py_3_7:
          python.version: '3.7'
          vmImageName: macOS-10.14
          uploadCoverage: "false"
    pool:
        vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    # Note the below code generates a pip requirements file from the pipenv development requirements and then installs via
    # pip. This is to simplify the environment setup as a virtual machine is already being used so pipenv is not needed.
    - script: |
        python -m pip install --upgrade pip
        pip install pipenv
        python -m pipenv lock --dev -r > dev-requirements.txt
        pip install -r dev-requirements.txt
        pip install pytest-azurepipelines
        pip list
      displayName: 'Install development dependencies'

    # Static analysis is different for Python versions so should be run in each environment.
    - script: |
        flake8
      displayName: 'Static Analysis (flake8)'

    - script: |
        pytest
      displayName: 'Run unit tests (pytest)'

    - script: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter
        ./cc-test-reporter format-coverage -t coverage.py -o coverage/codeclimate.json coverage/coverage.xml
        ./cc-test-reporter upload-coverage
      displayName: 'Upload test coverage to Code Climate'
      condition: and(succeeded(), eq(variables['uploadCoverage'], 'true'))
      env:
        CC_TEST_REPORTER_ID: $(CODECLIMATE_REPORTER_ID)
        GIT_BRANCH: $(Build.SourceBranchName)
        GIT_COMMIT: $(Build.SourceVersion)

- stage: BetaRelease
  displayName: 'Beta Release'
  # Only allow beta releases if the tests pass and we are on the beta branch.
  dependsOn: AnalyseTest
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/beta'))
  jobs:
  - deployment: PyPIBetaRelease
    displayName: 'PyPI Beta Release'
    # The following environment has a manual approval step to gate releases.
    # This can only be created and configured within the Environment section of Pipelines.
    # The release can be approved from the Azure pipeline run.
    environment: 'PyPI Release'
    strategy:
      runOnce:
        deploy:
          pool:
            vmImage: 'ubuntu-latest'
          steps:
          - task: UsePythonVersion@0
            inputs:
                versionSpec: '3.7'

          - checkout: self
            submodules: recursive
            persistCredentials: true

          - script: |
                python -m pip install --upgrade pip
                pip install -r ci_scripts/requirements.txt
            displayName: 'Install requirements'

          - bash: echo 'Twine release of beta version to be implemented here'
            displayName: 'PyPI Beta Release'

- stage: ProductionReleasePyPI
  displayName: 'Production Release'
  # Only allow production releases if the tests pass and we are on the master branch.
  dependsOn: AnalyseTest
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: PyPIProductionRelease
    displayName: 'PyPI Production Release'
    # The following environment has a manual approval step to gate releases.
    # This can only be created and configured within the Environment section of Pipelines.
    # The release can be approved from the Azure pipeline run.
    environment: 'PyPI Release'
    strategy:
      runOnce:
        deploy:
          pool:
            vmImage: 'ubuntu-latest'
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7'

          - checkout: self
            submodules: recursive
            persistCredentials: true

          - script: |
              python -m pip install --upgrade pip
              pip install -r ci_scripts/requirements.txt
            displayName: 'Install requirements'

          - bash: echo 'Twine release of production version to be implemented here'
            displayName: 'PyPI Production Release'
